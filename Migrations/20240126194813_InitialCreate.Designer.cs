// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace book_blog_api.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20240126194813_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("BookTag", b =>
                {
                    b.Property<int>("Bookid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tagsid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Bookid", "tagsid");

                    b.HasIndex("tagsid");

                    b.ToTable("BookTag");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<int>("Postid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("tagsid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Postid", "tagsid");

                    b.HasIndex("tagsid");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("book_blog_api.Models.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Postid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("coverImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("publicationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("rating")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("readDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("review")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Postid");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("book_blog_api.Models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("datePosted")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("postId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("postId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("book_blog_api.Models.Post", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("timesRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("book_blog_api.Models.Tag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BookTag", b =>
                {
                    b.HasOne("book_blog_api.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("Bookid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("book_blog_api.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("tagsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("book_blog_api.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("Postid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("book_blog_api.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("tagsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("book_blog_api.Models.Book", b =>
                {
                    b.HasOne("book_blog_api.Models.Post", null)
                        .WithMany("books")
                        .HasForeignKey("Postid");
                });

            modelBuilder.Entity("book_blog_api.Models.Comment", b =>
                {
                    b.HasOne("book_blog_api.Models.Post", "post")
                        .WithMany("comments")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");
                });

            modelBuilder.Entity("book_blog_api.Models.Post", b =>
                {
                    b.Navigation("books");

                    b.Navigation("comments");
                });
#pragma warning restore 612, 618
        }
    }
}
